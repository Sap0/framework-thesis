name: Terraform Deployment

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check and create Azure resources if needed
        run: |
          RESOURCE_GROUP="resource-group-states"
          STORAGE_ACCOUNT="storageaccountstates"
          CONTAINER_NAME="tfstate"

          echo "TF_RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_ENV
          echo "TF_STORAGE_ACCOUNT=$STORAGE_ACCOUNT" >> $GITHUB_ENV

          echo "Verifying Resource Group: $RESOURCE_GROUP"
          if ! az group show --name $RESOURCE_GROUP &>/dev/null; then
            echo "Resource Group does not exist. Creating..."
            az group create --name $RESOURCE_GROUP --location "East US"
          else
            echo "Resource Group exists."
          fi

          echo "Verifying Storage Account: $STORAGE_ACCOUNT"
          if ! az storage account show --name $STORAGE_ACCOUNT --resource-group $RESOURCE_GROUP &>/dev/null; then
            echo "Storage Account does not exist. Creating..."
            az storage account create --name $STORAGE_ACCOUNT --resource-group $RESOURCE_GROUP --sku Standard_LRS
          else
            echo "Storage Account exists."
          fi

          echo "Verifying Storage Container: $CONTAINER_NAME"
          if ! az storage container show --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT &>/dev/null; then
            echo "Storage Container does not exist. Creating..."
            az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT
          else
            echo "Storage Container exists."
          fi

          STORAGE_KEY=$(az storage account keys list --account-name $STORAGE_ACCOUNT --query '[0].value' --output tsv)

          echo "TF_STORAGE_KEY=$STORAGE_KEY" >> $GITHUB_ENV
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false # mandatory to terraform output the values correctly

      - name: Set Subscription ID
        run: echo "ARM_SUBSCRIPTION_ID=$(az account show --query id -o tsv)" >> $GITHUB_ENV

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=$TF_RESOURCE_GROUP" \
            -backend-config="storage_account_name=$TF_STORAGE_ACCOUNT" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="access_key=$TF_STORAGE_KEY"

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
      
      - name: Get ACR Name
        run: |
          ACR_NAME=$(terraform output -raw acr_name)
          echo "ACR_NAME is '$ACR_NAME'"
          echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV
        
      
      - name: Change directory, Build and Push Docker image
        run: |
          cd ../application
          az acr login --name $ACR_NAME 
          IMAGE_NAME="$ACR_NAME.azurecr.io/myapp:latest"
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME
      
      - name: Deploy to AKS
        run: |
          az aks get-credentials --resource-group myResourceGroup --name myAKSCluster
          kubectl apply -f ./kubernetes/deployment.yaml
